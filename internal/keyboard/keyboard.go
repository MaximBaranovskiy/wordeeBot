package keyboard

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func CreateMainKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ú–æ–∏ —Å–ª–æ–≤–∞—Ä–∏üìö", "myDictionaries"),
			tgbotapi.NewInlineKeyboardButtonData("–°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—åüìñ", "createDictionary"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å‚úèÔ∏è", "editDictionary"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤üè´", "studyWords"),
		),
	)
}

func CreateKeyboardToShowDict(names []string) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	for _, name := range names {
		row := []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData(name, name)}
		rows = append(rows, row)
	}

	row := []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©Ô∏è", "mainMenu")}
	rows = append(rows, row)

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func CreateKeyboardWithColumns(name string, arr []string) tgbotapi.InlineKeyboardMarkup {
	columnName2Sign := getColumnName2Sign()

	for _, columnData := range arr {
		columnName2Sign[columnData2Name[columnData]] = "‚úÖ"
	}

	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"+columnName2Sign["–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"], "transcription"+"_"+name),
			tgbotapi.NewInlineKeyboardButtonData("–ü–µ—Ä–µ–≤–æ–¥"+columnName2Sign["–ü–µ—Ä–µ–≤–æ–¥"], "translation"+"_"+name),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–∏–Ω–æ–Ω–∏–º—ã"+columnName2Sign["–°–∏–Ω–æ–Ω–∏–º—ã"], "synonyms"+"_"+name),
			tgbotapi.NewInlineKeyboardButtonData("–ê–Ω—Ç–æ–Ω–∏–º—ã"+columnName2Sign["–ê–Ω—Ç–æ–Ω–∏–º—ã"], "antonyms"+"_"+name),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"+columnName2Sign["–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"], "definition"+"_"+name),
			tgbotapi.NewInlineKeyboardButtonData("–ö–æ–ª–ª–æ–∫–∞—Ü–∏–∏"+columnName2Sign["–ö–æ–ª–ª–æ–∫–∞—Ü–∏–∏"], "collocations"+"_"+name),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ò–¥–∏–æ–º—ã"+columnName2Sign["–ò–¥–∏–æ–º—ã"], "idioms"+"_"+name),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—åüÜó", "confirm"+"_"+name),
		),
	)
}

func CreateKeyboardWithEditingOptions(name string) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "addWord"+"_"+name),
		),
	)
}

func CreateKeyboardToAddingWord() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–êüü¢", "addingWord"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–ï–¢üî¥", "cancelWord"),
		),
	)
}

var columnData2Name = map[string]string{
	"transcription": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è",
	"translation":   "–ü–µ—Ä–µ–≤–æ–¥",
	"synonyms":      "–°–∏–Ω–æ–Ω–∏–º—ã",
	"antonyms":      "–ê–Ω—Ç–æ–Ω–∏–º—ã",
	"definition":    "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
	"collocations":  "–ö–æ–ª–ª–æ–∫–∞—Ü–∏–∏",
	"idioms":        "–ò–¥–∏–æ–º—ã",
}

func getColumnName2Sign() map[string]string {
	return map[string]string{
		"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è": "‚ùå",
		"–ü–µ—Ä–µ–≤–æ–¥":      "‚ùå",
		"–°–∏–Ω–æ–Ω–∏–º—ã":     "‚ùå",
		"–ê–Ω—Ç–æ–Ω–∏–º—ã":     "‚ùå",
		"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ":  "‚ùå",
		"–ö–æ–ª–ª–æ–∫–∞—Ü–∏–∏":   "‚ùå",
		"–ò–¥–∏–æ–º—ã":       "‚ùå",
	}
}
